generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  slug              String?  @unique
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)
  customer_password String // ‚¨ÖÔ∏è add this
  tickets           Ticket[]

  @@map("organizations")
}

model Team {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  leader_id      Int?
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  primaryMembers Member[]         @relation("PrimaryTeam")
  memberLinks    MembersOnTeams[]
  tickets        Ticket[]

  @@map("teams")
}

model Member {
  id         Int      @id @default(autoincrement())
  name       String
  email      String?  @unique // ‚Üê make optional
  username   String?  @unique
  password   String
  role       String?
  is_leader  Boolean  @default(false)
  team_id    Int?
  team       Team?    @relation(fields: [team_id], references: [id], name: "PrimaryTeam")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  contact    String?  @db.VarChar(50)
  skillset   String?  @db.VarChar(255)

  assignedTickets Ticket[]          @relation("TicketAssigned")
  teamLinks       MembersOnTeams[]
  skillLinks      MembersOnSkills[]

  @@map("members")
}

model Skill {
  id          Int               @id @default(autoincrement())
  skill       String            @unique
  memberLinks MembersOnSkills[]

  @@map("Skill")
}

/// *
///  * üëá IMPORTANT: map to existing snake_case columns so Prisma does NOT drop them
model MembersOnTeams {
  memberId   Int      @map("member_id")
  teamId     Int      @map("team_id")
  assignedAt DateTime @default(now())
  member     Member   @relation(fields: [memberId], references: [id])
  team       Team     @relation(fields: [teamId], references: [id])

  @@id([memberId, teamId])
  @@map("members_teams")
}

model MembersOnSkills {
  memberId Int    @map("member_id")
  skillId  Int    @map("skill_id")
  member   Member @relation(fields: [memberId], references: [id])
  skill    Skill  @relation(fields: [skillId], references: [id])

  @@id([memberId, skillId])
  @@map("members_skills")
}

model Ticket {
  id              Int             @id @default(autoincrement())
  ticket_id       String          @unique @default(dbgenerated("generate_ticket_id()"))
  client_name     String
  description     String
  team_id         Int?
  assigned_to_id  Int?
  status          ticket_status   @default(NOT_STARTED)
  started_at      DateTime?       @db.Timestamptz(6)
  completed_at    DateTime?       @db.Timestamptz(6)
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @default(now()) @db.Timestamptz(6)
  organization_id Int?
  ticket_type     ticket_type     @default(INTERNAL)
  histories       TicketHistory[]
  assignee        Member?         @relation("TicketAssigned", fields: [assigned_to_id], references: [id])
  organization    Organization?   @relation(fields: [organization_id], references: [id])
  team            Team?           @relation(fields: [team_id], references: [id])

  @@map("tickets")
}

model TicketHistory {
  id         Int           @id @default(autoincrement())
  ticket_id  Int?
  status     ticket_status
  note       String?
  changed_by String?
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  ticket     Ticket?       @relation(fields: [ticket_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("ticket_histories")
}

enum ticket_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ticket_type {
  INTERNAL
  EXTERNAL
}
